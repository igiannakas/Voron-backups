# === EMU Lane Temperature and Humidity Sensors ===

[temperature_sensor Lane_0]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu0
i2c_software_scl_pin: mmu0:PB3
i2c_software_sda_pin: mmu0:PB4

[temperature_sensor Lane_1]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu1
i2c_software_scl_pin: mmu1:PB3
i2c_software_sda_pin: mmu1:PB4

[temperature_sensor Lane_2]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu2
i2c_software_scl_pin: mmu2:PB3
i2c_software_sda_pin: mmu2:PB4

[temperature_sensor Lane_3]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu3
i2c_software_scl_pin: mmu3:PB3
i2c_software_sda_pin: mmu3:PB4

[temperature_sensor Lane_4]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu4
i2c_software_scl_pin: mmu4:PB3
i2c_software_sda_pin: mmu4:PB4

[temperature_sensor Lane_5]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu5
i2c_software_scl_pin: mmu5:PB3
i2c_software_sda_pin: mmu5:PB4

[temperature_sensor Lane_6]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu6
i2c_software_scl_pin: mmu6:PB3
i2c_software_sda_pin: mmu6:PB4

[temperature_sensor Lane_7]
sensor_type: BME280
bme280_report_time: 20
i2c_address: 118
i2c_mcu: mmu7
i2c_software_scl_pin: mmu7:PB3
i2c_software_sda_pin: mmu7:PB4


# === MMU Fan Auto-Control Configuration ===

# === Temperature sensors ===
[temperature_sensor Lane_0_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu0
min_temp: 0
max_temp: 130

[temperature_sensor Lane_1_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu1
min_temp: 0
max_temp: 130

[temperature_sensor Lane_2_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu2
min_temp: 0
max_temp: 130

[temperature_sensor Lane_3_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu3
min_temp: 0
max_temp: 130

[temperature_sensor Lane_4_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu4
min_temp: 0
max_temp: 130

[temperature_sensor Lane_5_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu5
min_temp: 0
max_temp: 130

[temperature_sensor Lane_6_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu6
min_temp: 0
max_temp: 130

[temperature_sensor Lane_7_onboard]
sensor_type: temperature_mcu
sensor_mcu: mmu7
min_temp: 0
max_temp: 130

# === Fans ===

[fan_generic emu_fan_0]
pin: mmu0:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_1]
pin: mmu1:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_2]
pin: mmu2:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_3]
pin: mmu3:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_4]
pin: mmu4:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_5]
pin: mmu5:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_6]
pin: mmu6:PA0
max_power: 1
kick_start_time: 0.5

[fan_generic emu_fan_7]
pin: mmu7:PA0
max_power: 1
kick_start_time: 0.5


# === MMU Fan Auto-Control (multi-sensor / multi-fan) ===
#
# Pairs each temperature sensor with a fan by index and controls
# that fan with hysteresis based on the paired sensor.
#
# Example:
#   variable_sensors: "Lane_0_onboard,Lane_0_onboard"
#   variable_fans:    "mmu_fan_0,mmu_fan_1"
#
# Notes:
# - Lists must be comma-separated names (no spaces, or strip spaces).
# - If list lengths differ, the shorter length is used (index pairing).
# - FORCE (below) is global: affects all listed fans.

[gcode_macro MMU_FAN_CFG]
description: Holds configuration/state for multi fan controller.
variable_on_temp: 39.0
variable_off_temp: 37.0
variable_poll_s: 5.0
variable_enabled: True
variable_forced: -1                 # -1=AUTO, 0=all OFF, 1=all ON (global)
variable_sensors: "Lane_0_onboard,Lane_1_onboard,Lane_2_onboard,Lane_3_onboard,Lane_4_onboard,Lane_5_onboard,Lane_6_onboard,Lane_7_onboard"   # Comma-separated temperature_sensor names
variable_fans:    "emu_fan_0,emu_fan_1,emu_fan_2,emu_fan_3,emu_fan_4,emu_fan_5,emu_fan_6,emu_fan_7"  # Comma-separated fan_generic names
variable_warned_len_mismatch: False # internal: warn once per enable
gcode:

[gcode_macro MMU_FAN_MONITOR_ENABLE]
description: Enable automatic multi-fan control.
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=True
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0.1
  RESPOND TYPE=echo MSG="MMU multi-fan monitor ENABLED"

[gcode_macro MMU_FAN_MONITOR_DISABLE]
description: Disable automatic control and switch all fans OFF.
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=False
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0
  {% set cfg = printer["gcode_macro MMU_FAN_CFG"] %}
  {% set fans = (cfg.fans|string).replace(' ','').split(',') %}
  {% for f in fans %}
    {% if f|length > 0 %}
      SET_FAN_SPEED FAN={f} SPEED=0.0
    {% endif %}
  {% endfor %}
  RESPOND TYPE=echo MSG="MMU multi-fan monitor DISABLED and all fans OFF"

[gcode_macro MMU_FAN_FORCE]
description: Global manual override for all configured fans.
# Usage:
#   MMU_FAN_FORCE S=1   -> Force ALL ON
#   MMU_FAN_FORCE S=0   -> Force ALL OFF
#   MMU_FAN_FORCE S=-1  -> Return to AUTO (per-sensor hysteresis)
gcode:
  {% set s = params.S|default(-1)|int %}
  {% if s not in [-1,0,1] %}
    RESPOND TYPE=error MSG="MMU_FAN_FORCE: S must be -1, 0, or 1"
  {% else %}
    SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=forced VALUE={s}
    {% set cfg = printer["gcode_macro MMU_FAN_CFG"] %}
    {% set fans = (cfg.fans|string).replace(' ','').split(',') %}
    {% if s == 1 %}
      {% for f in fans %}
        {% if f|length > 0 %}
          SET_FAN_SPEED FAN={f} SPEED=1.0
        {% endif %}
      {% endfor %}
      RESPOND TYPE=echo MSG="MMU fans FORCED ON"
    {% elif s == 0 %}
      {% for f in fans %}
        {% if f|length > 0 %}
          SET_FAN_SPEED FAN={f} SPEED=0.0
        {% endif %}
      {% endfor %}
      RESPOND TYPE=echo MSG="MMU fans FORCED OFF"
    {% else %}
      RESPOND TYPE=echo MSG="MMU fans returned to AUTO mode"
    {% endif %}
  {% endif %}

[delayed_gcode _MMU_FAN_LOOP]
initial_duration: 1
gcode:
  {% set cfg = printer["gcode_macro MMU_FAN_CFG"] %}
  {% if cfg.enabled %}
    {% set forced  = cfg.forced|int %}
    {% set on_t    = cfg.on_temp|float %}
    {% set off_t   = cfg.off_temp|float %}
    {% set sensors = (cfg.sensors|string).replace(' ','').split(',') %}
    {% set fans    = (cfg.fans|string).replace(' ','').split(',') %}
    {% set n_s     = sensors|length %}
    {% set n_f     = fans|length %}
    {% set n_min   = (n_s if n_s < n_f else n_f)|int %}

    {% if n_s != n_f and (not (cfg.warned_len_mismatch|default(False))) %}
      RESPOND TYPE=echo MSG={"MMU_FAN: sensor/fan list length mismatch"}
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=warned_len_mismatch VALUE=True
    {% endif %}

    {% if forced == 1 %}
      {% for i in range(0, n_min) %}
        {% set f = fans[i] %}
        {% if f|length > 0 %}
          SET_FAN_SPEED FAN={f} SPEED=1.0
        {% endif %}
      {% endfor %}
    {% elif forced == 0 %}
      {% for i in range(0, n_min) %}
        {% set f = fans[i] %}
        {% if f|length > 0 %}
          SET_FAN_SPEED FAN={f} SPEED=0.0
        {% endif %}
      {% endfor %}
    {% else %}
      {% for i in range(0, n_min) %}
        {% set s_name = sensors[i] %}
        {% set f = fans[i] %}
        {% if s_name|length > 0 and f|length > 0 %}
          {% set t = printer["temperature_sensor " ~ s_name].temperature|float %}
          {% set cur_speed = (printer["fan_generic " ~ f].speed|default(0.0))|float %}
          {% set cur_state = 1 if cur_speed >= 0.5 else 0 %}
          {% if cur_state == 0 %}
            {% set target_state = 1 if t >= on_t else 0 %}
          {% else %}
            {% set target_state = 1 if t > off_t else 0 %}
          {% endif %}
          {% if target_state != cur_state %}
            {% if target_state == 1 %}
              SET_FAN_SPEED FAN={f} SPEED=1.0
            {% else %}
              SET_FAN_SPEED FAN={f} SPEED=0.0
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION={cfg.poll_s}
  {% endif %}

# Happy Hare LED additions

[mmu_led_effect mmu_static_white_dim]
define_on:    gates
layers:       static 0 0 top (0.3,0.3,0.3)

[mmu_led_effect mmu_ready_white]
define_on:    gates
layers:       breathing 2 0 subtract (0.4,0.4,0.4)
              static 0 0 top (0.5,0.5,0.5)

[mmu_led_effect mmu_ready_red]
define_on:    gates
layers:       breathing 2 0 subtract (0.4,0.0,0.0)
              static 0 0 top (0.5,0.0,0.0)