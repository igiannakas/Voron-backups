# === MMU Fan Auto-Control ===
#
# Automatically controls the MMU cooling fan based on the highest temperature
# reported by the combined MMU temperature sensor.
#
# Behaviour:
#   - Turns the fan ON at or above 42 °C.
#   - Turns the fan OFF when temperature drops back to 38 °C or lower.
#   - Uses hysteresis to avoid rapid fan toggling around the threshold.
#   - Allows manual override (force ON, force OFF, or AUTO mode).
#
# Requirements:
#   - A combined temperature sensor that reports the maximum of all MMU lanes:
#       [temperature_sensor max_mmu]
#       sensor_type: temperature_combined
#       sensor_list: temperature_sensor Lane_0_onboard, ...
#       combination_method: max
#   - A fan defined for the MMU:
#       [fan_generic mmu_fan]
#       pin: multi_pin:mmu_fans

[gcode_macro MMU_FAN_CFG]
description: Holds configuration and current state for the MMU fan controller.
variable_on_temp: 42.0        # Temperature threshold to turn fan ON
variable_off_temp: 40.0       # Temperature threshold to turn fan OFF
variable_poll_s: 5.0          # How often (seconds) to check the temperature
variable_enabled: True        # Start monitoring automatically at printer startup
variable_forced: -1           # -1 = auto, 0 = force OFF, 1 = force ON
variable_state: -1            # Internal state: -1 unknown, 0 OFF, 1 ON
gcode:

[gcode_macro MMU_FAN_MONITOR_ENABLE]
description: Enable the automatic fan control loop.
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=True
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0.1
  RESPOND TYPE=echo MSG="MMU fan monitor ENABLED"

[gcode_macro MMU_FAN_MONITOR_DISABLE]
description: Disable automatic fan control and switch fan OFF.
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=False
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0
  SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=0
  RESPOND TYPE=echo MSG="MMU fan monitor DISABLED and fan OFF"

[gcode_macro MMU_FAN_FORCE]
description: Manually override fan state.
# Usage:
#   MMU_FAN_FORCE S=1   -> Force ON
#   MMU_FAN_FORCE S=0   -> Force OFF
#   MMU_FAN_FORCE S=-1  -> Return to AUTO mode (temperature-controlled)
gcode:
  {% set s = params.S|default(-1)|int %}
  {% if s not in [-1,0,1] %}
    RESPOND TYPE=error MSG="MMU_FAN_FORCE: S must be -1, 0, or 1"
  {% else %}
    SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=forced VALUE={s}
    {% if s == 1 %}
      SET_FAN_SPEED FAN=mmu_fan SPEED=1.0
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=1
      RESPOND TYPE=echo MSG="MMU fan FORCED ON"
    {% elif s == 0 %}
      SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=0
      RESPOND TYPE=echo MSG="MMU fan FORCED OFF"
    {% else %}
      RESPOND TYPE=echo MSG="MMU fan returned to AUTO mode"
    {% endif %}
  {% endif %}

[delayed_gcode _MMU_FAN_LOOP]
initial_duration: 1
gcode:
  {% set cfg = printer["gcode_macro MMU_FAN_CFG"] %}
  {% if cfg.enabled %}
    {% set forced = cfg.forced|int %}
    {% if forced == 1 %}
      {% set target_state = 1 %}
    {% elif forced == 0 %}
      {% set target_state = 0 %}
    {% else %}
      {% set t = printer["temperature_sensor max_mmu"].temperature|float %}
      {% set on_t = cfg.on_temp|float %}
      {% set off_t = cfg.off_temp|float %}
      {% set cur = cfg.state|int %}
      # Hysteresis logic: only switch when thresholds are crossed
      {% if cur <= 0 %}
        {% set target_state = 1 if t >= on_t else 0 %}
      {% else %}
        {% set target_state = 1 if t > off_t else 0 %}
      {% endif %}
    {% endif %}
    {% if target_state != cfg.state|int %}
      {% if target_state == 1 %}
        SET_FAN_SPEED FAN=mmu_fan SPEED=1.0
      {% else %}
        SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
      {% endif %}
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE={target_state}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION={cfg.poll_s}
  {% endif %}
