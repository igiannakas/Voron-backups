# === MMU fan auto-control (40C on / 37C off with hysteresis) ===
# Requires your existing:
# [temperature_sensor max_mmu] ... (already defined by you)
# [fan_generic mmu_fan] pin: multi_pin:mmu_fans ... (already defined by you)

[gcode_macro MMU_FAN_CFG]
description: Config + state for the MMU fan monitor
variable_on_temp: 40.0        # turn fan ON at/above this temp
variable_off_temp: 37.0       # turn fan OFF at/below this temp
variable_poll_s: 2.0          # seconds between checks
variable_enabled: False       # monitor on/off
variable_forced: -1           # -1 = auto, 1 = force on, 0 = force off
variable_state: -1            # internal: -1 unknown, 0 off, 1 on
gcode:

[gcode_macro MMU_FAN_MONITOR_ENABLE]
description: Enable the MMU fan temperature monitor loop
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=True
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0.1
  RESPOND TYPE=note MSG="MMU fan monitor ENABLED"

[gcode_macro MMU_FAN_MONITOR_DISABLE]
description: Disable the MMU fan temperature monitor loop (and turn fan off)
gcode:
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=enabled VALUE=False
  UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION=0
  SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
  SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=0
  RESPOND TYPE=note MSG="MMU fan monitor DISABLED and fan OFF"

[gcode_macro MMU_FAN_FORCE]
description: Force fan on/off or return to auto. Usage: MMU_FAN_FORCE S=-1|0|1
# S=-1 auto (use temps), S=1 force full on, S=0 force off
gcode:
  {% set s = params.S|default(-1)|int %}
  {% if s not in [-1,0,1] %}
    RESPOND TYPE=error MSG="MMU_FAN_FORCE: S must be -1, 0, or 1"
  {% else %}
    SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=forced VALUE={s}
    {% if s == 1 %}
      SET_FAN_SPEED FAN=mmu_fan SPEED=1.0
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=1
      RESPOND TYPE=note MSG="MMU fan FORCED ON"
    {% elif s == 0 %}
      SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE=0
      RESPOND TYPE=note MSG="MMU fan FORCED OFF"
    {% else %}
      RESPOND TYPE=note MSG="MMU fan set to AUTO mode"
    {% endif %}
  {% endif %}

[delayed_gcode _MMU_FAN_LOOP]
initial_duration: 0
gcode:
  {% set cfg = printer["gcode_macro MMU_FAN_CFG"] %}
  {% if cfg.enabled %}
    {% set forced = cfg.forced|int %}
    {% if forced == 1 %}
      {% set target_state = 1 %}
    {% elif forced == 0 %}
      {% set target_state = 0 %}
    {% else %}
      {% set t = printer["temperature_sensor max_mmu"].temperature|float %}
      {% set on_t = cfg.on_temp|float %}
      {% set off_t = cfg.off_temp|float %}
      {% set cur = cfg.state|int %}
      # Hysteresis: if unknown or currently off, go on at >= on_t; if on, stay on until <= off_t
      {% if cur <= 0 %}
        {% set target_state = 1 if t >= on_t else 0 %}
      {% else %}
        {% set target_state = 1 if t > off_t else 0 %}
      {% endif %}
    {% endif %}
    {% if target_state != cfg.state|int %}
      {% if target_state == 1 %}
        SET_FAN_SPEED FAN=mmu_fan SPEED=1.0
      {% else %}
        SET_FAN_SPEED FAN=mmu_fan SPEED=0.0
      {% endif %}
      SET_GCODE_VARIABLE MACRO=MMU_FAN_CFG VARIABLE=state VALUE={target_state}
    {% endif %}
    # re-arm loop
    UPDATE_DELAYED_GCODE ID=_MMU_FAN_LOOP DURATION={cfg.poll_s}
  {% endif %}
